
R Under development (unstable) (2022-07-22 r82614 ucrt) -- "Unsuffered Consequences"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## this will render the output independent from the version of the package
> suppressPackageStartupMessages(library(fsdaR))
> suppressPackageStartupMessages(library(rrcov))
> 
> ##  A simple example of TCLUST with the 'hbk' data and all default
> ##  parameters
> data(hbk, package="robustbase")
> (out <- tclustfsda(hbk[, 1:3], k=2))

This is the very first call to the FSDA engine, 
it can take some time to initialize it ...



Call:
tclustfsda(x = hbk[, 1:3], k = 2)


Results for TCLUST algorithm:
 trim = 0, k = 2
Classification (trimmed points are indicated by 0 ):
 [1]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  2  2  2  2  2  2  2
[26]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
[51]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2

Means: 
    C1      C2    
X1  10.479   1.538
X2  22.229   1.780
X3  31.386   1.687

Trimmed objective function:  -387.0754 
> class(out)
[1] "tclustfsda"
> summary(out)

Call:
tclustfsda(x = hbk[, 1:3], k = 2)


Results for TCLUST algorithm:
 trim = , k = 
Means: 
    C1      C2    
X1  10.479   1.538
X2  22.229   1.780
X3  31.386   1.687

Variances: 
, , C1

    X1     X2     X3   
X1  1.096  0.000  0.000
X2  0.000  8.570  0.000
X3  0.000  0.000  4.952

, , C2

    X1     X2     X3   
X1  1.113  0.000  0.000
X2  0.000  1.133  0.000
X3  0.000  0.000  1.053


Classification: 
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[39] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
> 
> ##  TCLUST of Gayser data with three groups (k=3), 10%% trimming (alpha=0.1)
> ##      and restriction factor (c=10000)
> data(geyser2)
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 10000)


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  1  0  0  3  0  0  2  1  3  1  3  2  1  3  1  0  3  1  3  1  0  0  0  0  2
 [26]  1  3  2  2  2  2  2  0  2  1  0  3  1  3  2  1  3  1  3  2  0  1  3  1  3
 [51]  0  1  3  1  3  2  1  3  2  1  3  1  3  1  3  2  2  1  3  2  1  3  2  1  3
 [76]  1  3  2  2  2  2  2  0  0  2  2  2  1  3  1  3  1  3  1  3  2  2  1  3  0
[101]  3  1  3  2  1  3  1  3  2  2  1  3  2  1  3  1  3  1  3  0  0  2  1  3  2
[126]  1  3  1  3  1  3  0  0  1  3  1  3  1  3  2  1  3  2  2  1  3  1  3  1  3
[151]  2  1  3  2  2  2  2  1  3  1  3  1  3  0  2  1  3  1  3  1  0  3  2  0  2
[176]  2  1  3  2  1  3  2  2  1  3  2  1  3  1  3  1  3  2  2  2  2  2  1  3  1
[201]  3  2  1  3  1  3  2  1  3  1  3  1  3  0  2  1  3  1  3  1  3  1  3  2  2
[226]  2  2  2  2  2  1  3  1  3  1  0  3  2  1  3  1  3  0  0  2  1  3  1  3  1
[251]  3  2  2  2  2  2  2  1  3  2  2  1  3  1  0  3  2  1  3  1  3

Means: 
    C1     C2     C3   
V1  4.350  4.290  2.007
V2  1.995  4.114  4.512

Trimmed objective function:  -348.991 
> 
> ##  Plot with all default options
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000, plot=TRUE))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 10000,     plot = TRUE)


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  2  0  0  1  0  0  3  2  1  2  1  3  2  1  2  0  1  2  1  2  0  0  0  0  3
 [26]  2  1  3  3  3  3  3  0  3  2  0  1  2  1  3  2  1  2  1  3  0  2  1  2  1
 [51]  0  2  1  2  1  3  2  1  3  2  1  2  1  2  1  3  3  2  1  3  2  1  3  2  1
 [76]  2  1  3  3  3  3  3  0  0  3  3  3  2  1  2  1  2  1  2  1  3  3  2  1  0
[101]  1  2  1  3  2  1  2  1  3  3  2  1  3  2  1  2  1  2  1  0  0  3  2  1  3
[126]  2  1  2  1  2  1  0  0  2  1  2  1  2  1  3  2  1  3  3  2  1  2  1  2  1
[151]  3  2  1  3  3  3  3  2  1  2  1  2  1  0  3  2  1  2  1  2  0  1  3  0  3
[176]  3  2  1  3  2  1  3  3  2  1  3  2  1  2  1  2  1  3  3  3  3  3  2  1  2
[201]  1  3  2  1  2  1  3  2  1  2  1  2  1  0  3  2  1  2  1  2  1  2  1  3  3
[226]  3  3  3  3  3  2  1  2  1  2  0  1  3  2  1  2  1  0  0  3  2  1  2  1  2
[251]  1  3  3  3  3  3  3  2  1  3  3  2  1  2  0  1  3  2  1  2  1

Means: 
    C1     C2     C3   
V1  2.007  4.350  4.290
V2  4.512  1.995  4.114

Trimmed objective function:  -348.991 
> 
> ## IGNORE_RDIFF_BEGIN
> 
> ## Use the plot options to produce more complex plots ----------
> 
> ##  Plot with default confidence ellipses.
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000, plot="ellipse"))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 10000,     plot = "ellipse")


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  2  0  0  1  0  0  3  2  1  2  1  3  2  1  2  0  1  2  1  2  0  0  0  0  3
 [26]  2  1  3  3  3  3  3  0  3  2  0  1  2  1  3  2  1  2  1  3  0  2  1  2  1
 [51]  0  2  1  2  1  3  2  1  3  2  1  2  1  2  1  3  3  2  1  3  2  1  3  2  1
 [76]  2  1  3  3  3  3  3  0  0  3  3  3  2  1  2  1  2  1  2  1  3  3  2  1  0
[101]  1  2  1  3  2  1  2  1  3  3  2  1  3  2  1  2  1  2  1  0  0  3  2  1  3
[126]  2  1  2  1  2  1  0  0  2  1  2  1  2  1  3  2  1  3  3  2  1  2  1  2  1
[151]  3  2  1  3  3  3  3  2  1  2  1  2  1  0  3  2  1  2  1  2  0  1  3  0  3
[176]  3  2  1  3  2  1  3  3  2  1  3  2  1  2  1  2  1  3  3  3  3  3  2  1  2
[201]  1  3  2  1  2  1  3  2  1  2  1  2  1  0  3  2  1  2  1  2  1  2  1  3  3
[226]  3  3  3  3  3  2  1  2  1  2  0  1  3  2  1  2  1  0  0  3  2  1  2  1  2
[251]  1  3  3  3  3  3  3  2  1  3  3  2  1  2  0  1  3  2  1  2  1

Means: 
    C1     C2     C3   
V1  2.007  4.350  4.290
V2  4.512  1.995  4.114

Trimmed objective function:  -348.991 
> 
> ##  Plot with confidence ellipses specified by the user.
> myplot <- list(type="ellipse", conflev=0.5)
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000, plot=myplot))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 10000,     plot = myplot)


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  3  0  0  1  0  0  2  3  1  3  1  2  3  1  3  0  1  3  1  3  0  0  0  0  2
 [26]  3  1  2  2  2  2  2  0  2  3  0  1  3  1  2  3  1  3  1  2  0  3  1  3  1
 [51]  0  3  1  3  1  2  3  1  2  3  1  3  1  3  1  2  2  3  1  2  3  1  2  3  1
 [76]  3  1  2  2  2  2  2  0  0  2  2  2  3  1  3  1  3  1  3  1  2  2  3  1  0
[101]  1  3  1  2  3  1  3  1  2  2  3  1  2  3  1  3  1  3  1  0  0  2  3  1  2
[126]  3  1  3  1  3  1  0  0  3  1  3  1  3  1  2  3  1  2  2  3  1  3  1  3  1
[151]  2  3  1  2  2  2  2  3  1  3  1  3  1  0  2  3  1  3  1  3  0  1  2  0  2
[176]  2  3  1  2  3  1  2  2  3  1  2  3  1  3  1  3  1  2  2  2  2  2  3  1  3
[201]  1  2  3  1  3  1  2  3  1  3  1  3  1  0  2  3  1  3  1  3  1  3  1  2  2
[226]  2  2  2  2  2  3  1  3  1  3  0  1  2  3  1  3  1  0  0  2  3  1  3  1  3
[251]  1  2  2  2  2  2  2  3  1  2  2  3  1  3  0  1  2  3  1  3  1

Means: 
    C1     C2     C3   
V1  2.007  4.290  4.350
V2  4.512  4.114  1.995

Trimmed objective function:  -348.991 
> 
> ##  Contour plots
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000, plot="contour"))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 10000,     plot = "contour")


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  3  0  0  1  0  0  2  3  1  3  1  2  3  1  3  0  1  3  1  3  0  0  0  0  2
 [26]  3  1  2  2  2  2  2  0  2  3  0  1  3  1  2  3  1  3  1  2  0  3  1  3  1
 [51]  0  3  1  3  1  2  3  1  2  3  1  3  1  3  1  2  2  3  1  2  3  1  2  3  1
 [76]  3  1  2  2  2  2  2  0  0  2  2  2  3  1  3  1  3  1  3  1  2  2  3  1  0
[101]  1  3  1  2  3  1  3  1  2  2  3  1  2  3  1  3  1  3  1  0  0  2  3  1  2
[126]  3  1  3  1  3  1  0  0  3  1  3  1  3  1  2  3  1  2  2  3  1  3  1  3  1
[151]  2  3  1  2  2  2  2  3  1  3  1  3  1  0  2  3  1  3  1  3  0  1  2  0  2
[176]  2  3  1  2  3  1  2  2  3  1  2  3  1  3  1  3  1  2  2  2  2  2  3  1  3
[201]  1  2  3  1  3  1  2  3  1  3  1  3  1  0  2  3  1  3  1  3  1  3  1  2  2
[226]  2  2  2  2  2  3  1  3  1  3  0  1  2  3  1  3  1  0  0  2  3  1  3  1  3
[251]  1  2  2  2  2  2  2  3  1  2  2  3  1  3  0  1  2  3  1  3  1

Means: 
    C1     C2     C3   
V1  2.007  4.290  4.350
V2  4.512  4.114  1.995

Trimmed objective function:  -348.991 
> 
> ##  Filled contour plots with additional options: contourf plot with a named colormap.
> ##  Here we define four MATLAB-like colormaps, but the user can define anything else,
> ##  presented by a matrix with three columns which are the RGB triplets.
> 
> summer <- as.matrix(data.frame(x1=seq(from=0, to=1, length=65),
+                             x2=seq(from=0.5, to=1, length=65),
+                             x3=rep(0.4, 65)))
> spring <- as.matrix(data.frame(x1=rep(1, 65),
+                             x2=seq(from=0, to=1, length=65),
+                             x3=seq(from=1, to=0, length=65)))
> winter <- as.matrix(data.frame(x1=rep(0, 65),
+                             x2=seq(from=0, to=1, length=65),
+                             x3=seq(from=1, to=0, length=65)))
> autumn <- as.matrix(data.frame(x1=rep(1, 65),
+                             x2=seq(from=0, to=1, length=65),
+                             x3=rep(0, 65)))
> 
> out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000,
+    plot=list(type="contourf", cmap=autumn))
> out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000,
+    plot=list(type="contourf", cmap=winter))
> out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000,
+    plot=list(type="contourf", cmap=spring))
> out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000,
+    plot=list(type="contourf", cmap=summer))
> 
> ##  We compare the output using three different values of restriction factor
> ##      nsamp is the number of subsamples which will be extracted
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10000, nsamp=500, plot="ellipse"))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 10000,     plot = "ellipse", nsamp = 500)


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  3  0  0  1  0  0  2  3  1  3  1  2  3  1  3  0  1  3  1  3  0  0  0  0  2
 [26]  3  1  2  2  2  2  2  0  2  3  0  1  3  1  2  3  1  3  1  2  0  3  1  3  1
 [51]  0  3  1  3  1  2  3  1  2  3  1  3  1  3  1  2  2  3  1  2  3  1  2  3  1
 [76]  3  1  2  2  2  2  2  0  0  2  2  2  3  1  3  1  3  1  3  1  2  2  3  1  0
[101]  1  3  1  2  3  1  3  1  2  2  3  1  2  3  1  3  1  3  1  0  0  2  3  1  2
[126]  3  1  3  1  3  1  0  0  3  1  3  1  3  1  2  3  1  2  2  3  1  3  1  3  1
[151]  2  3  1  2  2  2  2  3  1  3  1  3  1  0  2  3  1  3  1  3  0  1  2  0  2
[176]  2  3  1  2  3  1  2  2  3  1  2  3  1  3  1  3  1  2  2  2  2  2  3  1  3
[201]  1  2  3  1  3  1  2  3  1  3  1  3  1  0  2  3  1  3  1  3  1  3  1  2  2
[226]  2  2  2  2  2  3  1  3  1  3  0  1  2  3  1  3  1  0  0  2  3  1  3  1  3
[251]  1  2  2  2  2  2  2  3  1  2  2  3  1  3  0  1  2  3  1  3  1

Means: 
    C1     C2     C3   
V1  2.007  4.290  4.350
V2  4.512  4.114  1.995

Trimmed objective function:  -348.991 
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=10, nsamp=500, refsteps=10, plot="ellipse"))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 10,     plot = "ellipse", nsamp = 500, refsteps = 10)


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  1  0  0  3  0  0  2  1  3  1  3  2  1  3  1  0  3  1  3  1  0  0  0  0  2
 [26]  1  3  2  2  2  2  2  0  2  1  0  3  1  3  2  1  3  1  3  2  0  1  3  1  3
 [51]  0  1  3  1  3  2  1  3  2  1  3  1  3  1  3  2  2  1  3  2  1  3  2  1  3
 [76]  1  3  2  2  2  2  2  0  0  2  2  2  1  3  1  3  1  3  1  3  2  2  1  3  0
[101]  3  1  3  2  1  3  1  3  2  2  1  3  2  1  3  1  3  1  3  0  0  2  1  3  2
[126]  1  3  1  3  1  3  0  0  1  3  1  3  1  3  2  1  3  2  2  1  3  1  3  1  3
[151]  2  1  3  2  2  2  2  1  3  1  3  1  3  0  2  1  3  1  3  1  0  3  2  0  2
[176]  2  1  3  2  1  3  2  2  1  3  2  1  3  1  3  1  3  2  2  2  2  2  1  3  1
[201]  3  2  1  3  1  3  2  1  3  1  3  1  3  0  2  1  3  1  3  1  3  1  3  2  2
[226]  2  2  2  2  2  1  3  1  3  1  0  3  2  1  3  1  3  0  0  2  1  3  1  3  1
[251]  3  2  2  2  2  2  2  1  3  2  2  1  3  1  0  3  2  1  3  1  3

Means: 
    C1     C2     C3   
V1  4.350  4.290  2.007
V2  1.995  4.114  4.512

Trimmed objective function:  -348.991 
> (out <- tclustfsda(geyser2, k=3, alpha=0.1, restrfactor=1, nsamp=500, refsteps=10, plot="ellipse"))

Call:
tclustfsda(x = geyser2, k = 3, alpha = 0.1, restrfactor = 1,     plot = "ellipse", nsamp = 500, refsteps = 10)


Results for TCLUST algorithm:
 trim = 0.1, k = 3
Classification (trimmed points are indicated by 0 ):
  [1]  3  0  0  2  0  0  1  3  2  3  2  1  3  2  3  0  2  3  2  3  0  0  0  0  1
 [26]  3  2  1  1  1  1  1  0  1  3  0  2  3  2  1  3  2  3  2  0  0  3  2  3  2
 [51]  1  3  2  3  2  1  3  2  1  3  2  3  2  3  2  1  1  3  2  1  3  2  1  3  2
 [76]  3  2  1  1  1  1  1  3  2  0  1  1  3  2  3  2  3  2  3  2  1  1  3  2  3
[101]  2  3  2  1  3  2  3  2  1  0  3  2  1  3  2  3  2  3  2  3  2  1  3  2  1
[126]  3  2  3  2  3  2  3  2  3  2  3  2  3  2  1  3  2  1  1  3  2  3  2  3  2
[151]  1  3  2  1  1  1  1  3  2  3  2  3  2  0  0  3  2  3  2  3  0  2  0  0  1
[176]  1  3  2  1  3  2  1  1  3  2  1  3  2  3  2  3  2  1  1  1  1  0  3  2  3
[201]  2  1  3  2  3  2  1  3  2  3  2  3  2  0  0  3  2  3  2  3  2  3  2  1  1
[226]  1  1  1  1  1  3  2  3  2  3  0  2  1  3  2  3  2  0  0  1  3  2  3  2  3
[251]  2  1  0  1  1  1  1  3  2  1  1  3  2  3  0  2  1  3  2  3  2

Means: 
    C1     C2     C3   
V1  4.348  2.030  4.352
V2  4.107  4.500  2.024

Trimmed objective function:  -372.2022 
> 
> ##  TCLUST applied to M5 data: A bivariate data set obtained from three normal
> ##  bivariate distributions with different scales and proportions 1:2:2. One of the
> ##  components is very overlapped with another one. A 10 per cent background noise is
> ##  added uniformly distributed in a rectangle containing the three normal components
> ##  and not very overlapped with the three mixture components. A precise description
> ##  of the M5 data set can be found in Garcia-Escudero et al. (2008).
> ##
> 
> data(M5data)
> pch=c(3, 1, 8, 4)
> col <- c("blue", "red", "black", "magenta")
> plot(M5data[, 1:2], col=col[M5data[,3]+1], pch=pch[M5data[,3]+1])
> 
> ##  Scatter plot matrix
> library(rrcov)
> plot(CovClassic(M5data[,1:2]), which="pairs", col=col[M5data[,3]+1], pch=pch[M5data[,3]+1])
Warning messages:
1: In par(usr) : argument 1 does not name a graphical parameter
2: In par(usr) : argument 1 does not name a graphical parameter
3: In par(usr) : argument 1 does not name a graphical parameter
4: In par(usr) : argument 1 does not name a graphical parameter
> plot(CovMcd(M5data[,1:2]), which="pairs", col=col[M5data[,3]+1], pch=pch[M5data[,3]+1])
Warning messages:
1: In par(usr) : argument 1 does not name a graphical parameter
2: In par(usr) : argument 1 does not name a graphical parameter
3: In par(usr) : argument 1 does not name a graphical parameter
4: In par(usr) : argument 1 does not name a graphical parameter
> 
> out <- tclustfsda(M5data[,1:2], k=3, alpha=0, restrfactor=1000, nsamp=100, plot=TRUE)
> out <- tclustfsda(M5data[,1:2], k=3, alpha=0, restrfactor=10, nsamp=100, plot=TRUE)
> out <- tclustfsda(M5data[,1:2], k=3, alpha=0.1, restrfactor=1, nsamp=1000,
+      plot=TRUE, equalweights=TRUE)
> out <- tclustfsda(M5data[,1:2], k=3, alpha=0.1, restrfactor=1000, nsamp=100, plot=TRUE)
> 
> 
> ##  tclust in presence of structured noise.
> set.seed (0)
> library(MASS)
> v <- runif (100, -2 * pi, 2 * pi)
> noise <- cbind (100 + 25 * sin (v), 10 + 5 * v)
> x <- rbind (mvrnorm (360, mu=c(0.0,  0), Sigma=matrix(c(1,  0,  0, 1), ncol = 2)),
+             mvrnorm (540, mu=c(5.0, 10), Sigma=matrix(c(6, -2, -2, 6), ncol = 2)),
+             noise)
> (out <- tclustfsda(x, k=2, alpha=0.1, restrfactor=100, plot=1))

Call:
tclustfsda(x = x, k = 2, alpha = 0.1, restrfactor = 100, plot = 1)


Results for TCLUST algorithm:
 trim = 0.1, k = 2
Classification (trimmed points are indicated by 0 ):
   [1]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
  [25]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
  [49]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
  [73]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
  [97]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [121]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [145]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [169]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [193]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [217]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [241]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [265]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [289]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [313]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [337]  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1
 [361]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [385]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [409]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [433]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [457]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [481]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [505]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [529]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [553]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [577]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [601]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [625]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [649]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [673]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [697]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [721]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [745]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [769]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [793]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [817]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [841]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [865]  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2
 [889]  2  2  2  2  2  2  2  2  2  2  2  2  0  0  0  0  0  0  0  0  0  0  0  0
 [913]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [937]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [961]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [985]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0

Means: 
    C1       C2     
X1  0.04444  5.05936
X2  0.01443  9.92827

Trimmed objective function:  -4114.88 
> (out <- tclustfsda(x, k=55, alpha=0.15, restrfactor=1, plot=1))

Number of requested clusters = 55 
Number of estimated clusters = 5 

Call:
tclustfsda(x = x, k = 55, alpha = 0.15, restrfactor = 1, plot = 1)


Results for TCLUST algorithm:
 trim = 0.15, k = 55
Classification (trimmed points are indicated by 0 ):
   [1]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
  [25]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
  [49]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
  [73]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
  [97]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [121]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [145]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [169]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [193]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [217]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [241]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [265]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [289]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [313]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [337]  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5
 [361]  3  0  0  4  3  3  0  1  2  2  3  2  1  0  2  4  4  4  2  0  2  2  2  3
 [385]  3  3  2  1  1  3  1  1  2  3  4  1  3  2  2  3  2  3  1  2  2  2  4  1
 [409]  3  0  1  3  3  3  3  2  1  4  2  3  4  3  4  2  4  3  2  1  2  2  1  3
 [433]  2  2  2  0  4  1  4  4  1  2  1  3  4  1  3  1  2  1  3  3  0  3  2  2
 [457]  1  3  4  3  1  0  3  1  0  3  3  0  1  3  2  3  3  4  3  3  3  4  1  1
 [481]  1  1  4  1  1  2  3  3  3  1  4  3  3  4  2  3  3  1  1  0  3  2  3  4
 [505]  3  3  2  2  0  3  1  2  0  1  3  1  1  2  2  0  3  0  3  4  3  3  3  2
 [529]  3  1  4  2  3  3  1  4  4  1  3  1  3  1  2  4  2  3  3  1  0  2  1  0
 [553]  3  3  2  0  4  3  2  1  3  4  1  1  2  1  1  3  3  4  1  1  2  4  1  0
 [577]  2  1  3  0  2  3  3  4  3  0  0  2  2  3  3  2  3  1  1  4  3  3  3  1
 [601]  3  4  0  2  1  3  0  2  3  3  3  1  1  1  3  2  3  3  4  3  3  3  0  3
 [625]  3  1  2  2  1  4  1  4  3  2  3  3  4  1  1  2  3  3  1  2  3  4  3  2
 [649]  3  2  2  0  0  3  0  2  2  2  3  2  3  3  4  1  1  3  4  3  3  3  3  2
 [673]  4  2  3  1  1  3  3  3  4  4  1  0  0  0  0  2  1  4  1  2  3  3  3  0
 [697]  2  4  3  3  3  3  0  0  3  3  3  1  3  3  2  1  3  4  4  2  2  1  1  3
 [721]  2  4  1  4  0  0  3  4  0  3  2  2  1  2  3  3  4  4  4  3  2  2  4  3
 [745]  2  2  3  4  3  3  3  4  3  1  4  0  1  0  2  3  4  3  2  2  2  2  0  2
 [769]  1  2  1  0  4  2  0  3  3  3  3  2  4  4  4  2  1  3  3  4  4  4  3  1
 [793]  2  3  3  1  2  3  3  4  3  3  3  3  3  3  4  4  2  3  2  3  3  2  0  1
 [817]  0  2  4  3  3  4  3  3  2  4  3  1  3  3  3  3  1  3  3  4  1  1  2  0
 [841]  3  1  4  4  1  3  3  2  1  0  2  3  4  3  2  2  4  3  2  2  4  3  4  3
 [865]  3  1  3  2  3  3  4  4  1  2  1  4  3  3  0  0  3  4  4  4  3  1  1  3
 [889]  3  4  4  3  3  4  3  3  2  4  1  1  0  0  0  0  0  0  0  0  0  0  0  0
 [913]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [937]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [961]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 [985]  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0

Means: 
    C1        C2        C3        C4        C5        C6        C7      
X1   7.90958   2.81003   4.31462   6.76530   0.04444       NaN       NaN
X2   7.67010  12.49166   8.83081  11.66185   0.01443       NaN       NaN
    C8        C9        C10       C11       C12       C13       C14     
X1       NaN       NaN       NaN       NaN       NaN       NaN       NaN
X2       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    C15       C16       C17       C18       C19       C20       C21     
X1       NaN       NaN       NaN       NaN       NaN       NaN       NaN
X2       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    C22       C23       C24       C25       C26       C27       C28     
X1       NaN       NaN       NaN       NaN       NaN       NaN       NaN
X2       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    C29       C30       C31       C32       C33       C34       C35     
X1       NaN       NaN       NaN       NaN       NaN       NaN       NaN
X2       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    C36       C37       C38       C39       C40       C41       C42     
X1       NaN       NaN       NaN       NaN       NaN       NaN       NaN
X2       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    C43       C44       C45       C46       C47       C48       C49     
X1       NaN       NaN       NaN       NaN       NaN       NaN       NaN
X2       NaN       NaN       NaN       NaN       NaN       NaN       NaN
    C50       C51       C52       C53       C54       C55     
X1       NaN       NaN       NaN       NaN       NaN       NaN
X2       NaN       NaN       NaN       NaN       NaN       NaN

Trimmed objective function:  -3855.507 
Warning message:
In tclustfsda(x, k = 55, alpha = 0.15, restrfactor = 1, plot = 1) :
  The total number of estimated clusters is smaller than the number supplied
> 
> 
> ##===============================================================
> ##  tclustIC(), tclustICsol(), tclustICplot(), carbike() ========
> 
> ##  Plot BIC, ICL and CLA for for Geyser data with all default options.
> ##  Make sure (whenever possible) that units 15, 30 and 69 are inside
> ##  groups which have labels respectively equal to 1, 2 and 3.
> 
> data(geyser2)
> 
> (out <- tclustIC(geyser2, whichIC="MIXMIX", plot=FALSE, alpha=0.1,
+     UnitsSameGroup=c(15, 30, 69)))
Starting parallel pool (parpool) using the 'local' profile ...
Connected to the parallel pool (number of workers: 2).
k=1
k=2
k=3
k=4
k=5
Parallel pool using the 'local' profile is shutting down.

Call:
tclustIC(x = geyser2, alpha = 0.1, whichIC = "MIXMIX", plot = FALSE,     UnitsSameGroup = c(15, 30, 69))

Information criteria for TCLUST: MIXMIX 
 Trimming = 0.1
Number of mixture components (clusters): 1 2 3 4 5
values of the restriction factor: 1 2 4 8 16 32 64 128 


Penalized mixture likelihood:
     c=1   c=2   c=4   c=8   c=16  c=32  c=64  c=128
k=1  1476  1408  1356  1343  1343  1343  1343  1343 
k=2  1246  1134  1038   983   951   943   943   943 
k=3   810   791   786   786   791   791   791   791 
k=4   812   803   803   803   803   800   800   800 
k=5   815   822   828   824   819   823   823   824 
> tclustICplot(out, whichIC="MIXMIX")
> 
> ##  Car- bike plot with geyser2
> data(geyser2)
> 
> ##  alpha and restriction factor are not specified therefore for alpha
> ##  vector [0.10 0.05 0] is used while for the restriction factor, value c=12
> ##  is used
> (out <- tclustIC(geyser2, plot=FALSE, alpha=0.1, trace = TRUE))
$plots
[1] 0

$kk
[1] 1 2 3 4 5

$cc
[1]   1   2   4   8  16  32  64 128

$alpha
[1] 0.1

$whichIC
[1] "ALL"

$refsteps
[1] 15

$reftol
[1] 1e-14

$equalweights
[1] FALSE

$msg
[1] 1

$nocheck
[1] 0

$startv1
[1] 1

$restrtype
[1] "eigen"

Starting parallel pool (parpool) using the 'local' profile ...
Connected to the parallel pool (number of workers: 2).
k=1
k=2
k=3
k=4
k=5
Parallel pool using the 'local' profile is shutting down.

Returning from MATLAB tclustIC().  Fields returned by MATLAB: 
 [1] "CLACLA"      "CLACLAtable" "IDXCLA"      "IDXMIX"      "MIXMIX"     
 [6] "MIXMIXtable" "MIXCLA"      "MIXCLAtable" "kk"          "cc"         
[11] "alpha"       "Y"          

tclustIC(): object 'out' after removing the NULL objects: [1] "call"    "CLACLA"  "IDXCLA"  "MIXMIX"  "MIXCLA"  "IDXMIX"  "kk"     
 [8] "cc"      "alpha"   "whichIC" "X"      

Call:
tclustIC(x = geyser2, alpha = 0.1, plot = FALSE, trace = TRUE)

Information criteria for TCLUST: ALL 
 Trimming = 0.1
Number of mixture components (clusters): 1 2 3 4 5
values of the restriction factor: 1 2 4 8 16 32 64 128 


Penalized mixture likelihood:
     c=1   c=2   c=4   c=8   c=16  c=32  c=64  c=128
k=1  1476  1408  1356  1343  1343  1343  1343  1343 
k=2  1246  1134  1038   983   951   943   943   943 
k=3   810   791   786   786   791   791   791   791 
k=4   812   803   803   803   802   800   800   801 
k=5   816   822   828   823   820   816   818   817 


Penalized classification likelihood:
     c=1   c=2   c=4   c=8   c=16  c=32  c=64  c=128
k=1  1476  1408  1356  1343  1343  1343  1343  1343 
k=2  1254  1135  1038   983   951   943   943   943 
k=3   810   791   786   786   791   791   791   791 
k=4   826   813   809   813   807   806   807   805 
k=5   848   840   842   841   836   835   835   830 


ICL criterion:
     c=1   c=2   c=4   c=8   c=16  c=32  c=64  c=128
k=1  1476  1408  1356  1343  1343  1343  1343  1343 
k=2  1254  1135  1038   983   951   943   943   943 
k=3   810   791   786   786   791   791   791   791 
k=4   828   817   818   816   823   818   821   812 
k=5   858   868   884   861   852   854   858   858 
> tclustICplot(out)
> (outsol <- tclustICsol(out))
Best solution number: 1
k=3
c=4
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 2
k=4
c=32
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 3
k=5
c=1
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 4
k=2
c=32
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 5
k=2
c=8
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 1
k=3
c=4
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 2
k=4
c=128
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 3
k=5
c=16
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 4
k=2
c=32
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 5
k=2
c=8
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 1
k=3
c=4
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 2
k=4
c=128
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 3
k=5
c=128
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 4
k=2
c=32
Find for which adjacent value of c (and fixed k) best solution extends to
Best solution number: 5
k=2
c=8
Find for which adjacent value of c (and fixed k) best solution extends to
$call
tclustICsol(out = out)

$MIXMIXbs
  k c  c (uniformly better) c (stable) Solution  
1 3 4  numeric,7            1          "true"    
2 4 32 numeric,8            list,0     "spurious"
3 5 1  numeric,8            list,0     "spurious"
4 2 32 numeric,4            list,0     "true"    
5 2 8  numeric,4            list,0     "true"    

$MIXMIXbsari
          1         2         3         4         5
1 1.0000000 0.8654612 0.7557066 0.6013849 0.6048461
2 0.8654612 1.0000000 0.7177864 0.4830721 0.4913890
3 0.7557066 0.7177864 1.0000000 0.4148925 0.4320300
4 0.6013849 0.4830721 0.4148925 1.0000000 0.1855485
5 0.6048461 0.4913890 0.4320300 0.1855485 1.0000000

$ARIMIX
     c2_vs_c1  c4_vs_c2  c8_vs_c4 c16_vs_c8 c32_vs_c16 c64_vs_c32 c128_vs_c64
k=1 1.0000000 1.0000000 1.0000000 1.0000000  1.0000000  1.0000000   1.0000000
k=2 0.9660403 1.0000000 1.0000000 0.2021931  1.0000000  1.0000000   1.0000000
k=3 1.0000000 1.0000000 1.0000000 1.0000000  1.0000000  1.0000000   1.0000000
k=4 0.9936459 0.9938795 0.7846205 0.9303146  1.0000000  0.9927179   0.9787027
k=5 0.9142705 0.8182366 0.8879414 0.8064192  0.7008486  0.7114332   0.9667981

$MIXCLAbs
  k c   c (uniformly better) c (stable) Solution  
1 3 4   numeric,8            list,0     "true"    
2 4 128 numeric,8            list,0     "spurious"
3 5 16  numeric,8            list,0     "spurious"
4 2 32  numeric,4            list,0     "true"    
5 2 8   numeric,4            list,0     "true"    

$MIXCLAbsari
          1         2         3         4         5
1 1.0000000 0.8686967 0.7683252 0.6013849 0.6048461
2 0.8686967 1.0000000 0.9036966 0.4866631 0.4921240
3 0.7683252 0.9036966 1.0000000 0.4095835 0.4423537
4 0.6013849 0.4866631 0.4095835 1.0000000 0.1855485
5 0.6048461 0.4921240 0.4423537 0.1855485 1.0000000

$CLACLAbs
  k c   c (uniformly better) c (stable) Solution  
1 3 4   numeric,7            1          "true"    
2 4 128 numeric,8            list,0     "spurious"
3 5 128 numeric,8            list,0     "spurious"
4 2 32  numeric,4            list,0     "true"    
5 2 8   numeric,4            list,0     "true"    

$CLACLAbsari
          1         2         3         4         5
1 1.0000000 0.8818495 0.8443493 0.6013849 0.6048461
2 0.8818495 1.0000000 0.9356981 0.4918723 0.5070733
3 0.8443493 0.9356981 1.0000000 0.4555457 0.4971008
4 0.6013849 0.4918723 0.4555457 1.0000000 0.1855485
5 0.6048461 0.5070733 0.4971008 0.1855485 1.0000000

$ARICLA
     c2_vs_c1  c4_vs_c2  c8_vs_c4 c16_vs_c8 c32_vs_c16 c64_vs_c32 c128_vs_c64
k=1 1.0000000 1.0000000 1.0000000 1.0000000  1.0000000  1.0000000   1.0000000
k=2 0.9829444 1.0000000 1.0000000 0.2021931  1.0000000  1.0000000   1.0000000
k=3 1.0000000 1.0000000 1.0000000 1.0000000  1.0000000  1.0000000   1.0000000
k=4 1.0000000 0.9127807 1.0000000 0.8344724  0.9931204  0.9797728   0.9861570
k=5 1.0000000 0.9127807 0.9342287 0.8300482  0.9547708  0.9558165   0.8986074

$kk
[1] 1 2 3 4 5

$cc
[1]   1   2   4   8  16  32  64 128

$whichIC
[1] "ALL"

$alpha
[1] 0.1

attr(,"class")
[1] "tclusticsol"
> carbikeplot(outsol)
> 
> ## IGNORE_RDIFF_END
> 
> proc.time()
   user  system elapsed 
 339.53   26.57  385.67 
